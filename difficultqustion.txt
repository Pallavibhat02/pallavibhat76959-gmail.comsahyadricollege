3]Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.

step 1] Iterate through each digit place (units, tens, hundreds, etc.) of the numbers from right to left.

 step 2] For each digit place, split the number into three parts: the digits to the right of the current place (rightPart), the current digit (currentDigit), and the digits to the left of the current place (leftPart).

step 3] Calculate the count of digit 1 at the current place using the following rules:

step 4] If currentDigit is 0, the count at the current place is leftPart * 10^i.

step 5] If currentDigit is 1, the count at the current place is leftPart * 10^i + rightPart + 1.

step 6]If currentDigit is greater than 1, the count at the current place is (leftPart + 1) * 10^i.
Accumulate the count for each digit place.


CODE:
import java.util.Scanner;
import java.util.*;

public class CountDigitOne {

    public static int countDigitOne(int n) {
        int count = 0;
        for (long i = 1; i <= n; i *= 10) {
            long divider = i * 10;
            count += (n / divider) * i + Math.min(Math.max(n % divider - i + 1, 0), i);
        }
        return count;
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
	int n=sc.nextInt();
        int result = countDigitOne(n);
        System.out.println("The total number of digit 1 appearing in all numbers up to " + n + " is: " + result);
    }
}
